import React, { createContext, useContext, useState } from 'react';

type Language = 'en' | 'hi';

type LanguageContextType = {
  language: Language;
  setLanguage: (lang: Language) => void;
  t: (key: string) => string;
};

const translations = {
  en: {
    'app.title': 'LivestockCare',
    'app.subtitle': 'Smart Cattle Management System',
    'app.mission': "At LivestockCare, we believe healthy cattle mean healthy families. But sometimes, small traces of medicines, called microresidues, remain in milk, meat, or eggs. These invisible leftovers can silently harm your cattle, spread diseases to people, and reduce trust in your products. That's why we bring you a smart system where you can easily register cattle, connect with trusted veterinarians, get safe treatment alerts, and even chat with us in your own language. Simple, smart, and farmer-friendlyтАФyour partner in keeping livestock safe and your community healthier. ЁЯМ▒",
    'roles.farmer': 'Farmer',
    'roles.veterinarian': 'Veterinarian',
    'roles.admin': 'Admin',
    'auth.login': 'Login',
    'auth.register': 'Register',
    'nav.dashboard': 'Dashboard',
    'nav.cattle': 'My Cattle',
    'nav.treatments': 'Treatments',
    'nav.profile': 'Profile',
    'farmer.register_cattle': 'Register New Cattle',
    'farmer.my_veterinarian': 'My Veterinarian',
    'farmer.treatment_history': 'Treatment History',
    'vet.farmers': 'Farmers',
    'vet.treatments': 'Treatments',
    'vet.prescriptions': 'Prescriptions',
    'admin.dashboard': 'Admin Dashboard',
    'admin.analytics': 'Analytics',
    'admin.reports': 'Reports',
    'theme.light': 'Light',
    'theme.dark': 'Dark',
    'theme.system': 'System',
  },
  hi: {
    'app.title': 'рд▓рд╛рдЗрд╡рд╕реНрдЯреЙрдХрдХреЗрдпрд░',
    'app.subtitle': 'рд╕реНрдорд╛рд░реНрдЯ рдкрд╢реБ рдкреНрд░рдмрдВрдзрди рдкреНрд░рдгрд╛рд▓реА',
    'app.mission': 'рд▓рд╛рдЗрд╡рд╕реНрдЯреЙрдХрдХреЗрдпрд░ рдореЗрдВ рд╣рдорд╛рд░рд╛ рдорд╛рдирдирд╛ рд╣реИ рдХрд┐ рд╕реНрд╡рд╕реНрде рдкрд╢реБ рд╣реА рд╕реНрд╡рд╕реНрде рдкрд░рд┐рд╡рд╛рд░ рдХреА рдкрд╣рдЪрд╛рди рд╣реИрдВред рд▓реЗрдХрд┐рди рдХрдИ рдмрд╛рд░ рджрд╡рд╛рдЗрдпреЛрдВ рдХреЗ рдЫреЛрдЯреЗ-рдЫреЛрдЯреЗ рдЕрдВрд╢, рдЬрд┐рдиреНрд╣реЗрдВ рдорд╛рдЗрдХреНрд░реЛрд░рд┐рдЬрд╝рд┐рдбреНрдпреВ рдХрд╣рд╛ рдЬрд╛рддрд╛ рд╣реИ, рджреВрдз, рдорд╛рдВрд╕ рдпрд╛ рдЕрдВрдбреЛрдВ рдореЗрдВ рд░рд╣ рдЬрд╛рддреЗ рд╣реИрдВред рдпреЗ рдЕрджреГрд╢реНрдп рдХрдг рдЖрдкрдХреЗ рдкрд╢реБрдУрдВ рдХреЛ рдХрдордЬреЛрд░ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ, рдЗрдВрд╕рд╛рдиреЛрдВ рдореЗрдВ рдмреАрдорд╛рд░рд┐рдпрд╛рдБ рдлреИрд▓рд╛ рд╕рдХрддреЗ рд╣реИрдВ рдФрд░ рдЖрдкрдХреЗ рдЙрддреНрдкрд╛рджреЛрдВ рдкрд░ рднрд░реЛрд╕рд╛ рдШрдЯрд╛ рд╕рдХрддреЗ рд╣реИрдВред рдЗрд╕реА рд▓рд┐рдП рд╣рдо рд▓рд╛рдП рд╣реИрдВ рдПрдХ рд╕реНрдорд╛рд░реНрдЯ рд╕рд┐рд╕реНрдЯрдо рдЬрд╣рд╛рдБ рдЖрдк рдЖрд╕рд╛рдиреА рд╕реЗ рдЕрдкрдиреЗ рдкрд╢реБ рдкрдВрдЬреАрдХреГрдд рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ, рднрд░реЛрд╕реЗрдордВрдж рдкрд╢реБ рдЪрд┐рдХрд┐рддреНрд╕рдХреЛрдВ рд╕реЗ рдЬреБрдбрд╝ рд╕рдХрддреЗ рд╣реИрдВ, рд╕реБрд░рдХреНрд╖рд┐рдд рдЙрдкрдЪрд╛рд░ рдЕрд▓рд░реНрдЯ рдкрд╛ рд╕рдХрддреЗ рд╣реИрдВ рдФрд░ рдЕрдкрдиреА рднрд╛рд╖рд╛ рдореЗрдВ рд╣рдорд╕реЗ рдЪреИрдЯ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред рдЖрд╕рд╛рди, рд╕реНрдорд╛рд░реНрдЯ рдФрд░ рдХрд┐рд╕рд╛рди-рдорд┐рддреНрд░тАФрдЖрдкрдХреЗ рдкрд╢реБ рдФрд░ рдЖрдкрдХреЗ рдкрд░рд┐рд╡рд╛рд░ рдХреА рд╕реБрд░рдХреНрд╖рд╛ рдореЗрдВ рдЖрдкрдХрд╛ рд╕рд╛рдереАред ЁЯМ▒',
    'roles.farmer': 'рдХрд┐рд╕рд╛рди',
    'roles.veterinarian': 'рдкрд╢реБ рдЪрд┐рдХрд┐рддреНрд╕рдХ',
    'roles.admin': 'рд╡реНрдпрд╡рд╕реНрдерд╛рдкрдХ',
    'auth.login': 'рд▓реЙрдЧрд┐рди',
    'auth.register': 'рдкрдВрдЬреАрдХрд░рдг',
    'nav.dashboard': 'рдбреИрд╢рдмреЛрд░реНрдб',
    'nav.cattle': 'рдореЗрд░реЗ рдкрд╢реБ',
    'nav.treatments': 'рдЙрдкрдЪрд╛рд░',
    'nav.profile': 'рдкреНрд░реЛрдлрд╛рдЗрд▓',
    'farmer.register_cattle': 'рдирдпрд╛ рдкрд╢реБ рдкрдВрдЬреАрдХреГрдд рдХрд░реЗрдВ',
    'farmer.my_veterinarian': 'рдореЗрд░рд╛ рдкрд╢реБ рдЪрд┐рдХрд┐рддреНрд╕рдХ',
    'farmer.treatment_history': 'рдЙрдкрдЪрд╛рд░ рдЗрддрд┐рд╣рд╛рд╕',
    'vet.farmers': 'рдХрд┐рд╕рд╛рди',
    'vet.treatments': 'рдЙрдкрдЪрд╛рд░',
    'vet.prescriptions': 'рдиреБрд╕реНрдЦреЗ',
    'admin.dashboard': 'рд╡реНрдпрд╡рд╕реНрдерд╛рдкрдХ рдбреИрд╢рдмреЛрд░реНрдб',
    'admin.analytics': 'рд╡рд┐рд╢реНрд▓реЗрд╖рдг',
    'admin.reports': 'рд░рд┐рдкреЛрд░реНрдЯ',
    'theme.light': 'рд╣рд▓реНрдХрд╛',
    'theme.dark': 'рдЧрд╣рд░рд╛',
    'theme.system': 'рд╕рд┐рд╕реНрдЯрдо',
  },
};

const LanguageContext = createContext<LanguageContextType | undefined>(undefined);

export function LanguageProvider({ children }: { children: React.ReactNode }) {
  const [language, setLanguage] = useState<Language>('en');

  const t = (key: string): string => {
    return translations[language][key as keyof typeof translations['en']] || key;
  };

  return (
    <LanguageContext.Provider value={{ language, setLanguage, t }}>
      {children}
    </LanguageContext.Provider>
  );
}

export const useLanguage = () => {
  const context = useContext(LanguageContext);
  if (!context) {
    throw new Error('useLanguage must be used within a LanguageProvider');
  }
  return context;
};